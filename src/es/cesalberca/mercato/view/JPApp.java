package es.cesalberca.mercato.view;

import es.cesalberca.mercato.controller.database.DBConnector;
import es.cesalberca.mercato.controller.shop.Shop;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import es.cesalberca.mercato.model.Category;
import es.cesalberca.mercato.model.Item;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Panel principal de la aplicación.
 * @author César Alberca
 */
public class JPApp extends javax.swing.JPanel {
    private ArrayList<Item> items = null;
    private Shop shop = null;
    
    /**
     * La tienda (shop) se la pasamos del JFrame al JPanel ya que ambas comparten el mismo controlador.
     */
    
    /**
     * Constructor del jpanel JPApp
     * @param shop Controlador de la tienda.
     */
    public JPApp(Shop shop) {
        initComponents();
        this.shop = shop;
        jbAddOrder.setEnabled(false);
        
        // Añadimos un listener event para poder capturar el evento del cambio de estado del combo box.
        jcbCategories.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                // Esto nos evita un null pointer exception al cargar la app.
                if (jcbCategories.getSelectedItem() != null) {
                    jcbItems.removeAllItems();
                    loadItems();
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbLogin = new javax.swing.JButton();
        jbSignup = new javax.swing.JButton();
        jlCategory = new javax.swing.JLabel();
        jlItem = new javax.swing.JLabel();
        jbAddOrder = new javax.swing.JButton();
        jcbCategories = new javax.swing.JComboBox<>();
        jcbItems = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtOrders = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jbLogin.setText("Iniciar sesión");
        jbLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLoginActionPerformed(evt);
            }
        });

        jbSignup.setText("Registrarse");
        jbSignup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSignupActionPerformed(evt);
            }
        });

        jlCategory.setText("Categoría");

        jlItem.setText("Producto");

        jbAddOrder.setText("Añadir a la cesta");
        jbAddOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAddOrderActionPerformed(evt);
            }
        });

        jcbCategories.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-------" }));
        jcbCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcbCategoriesActionPerformed(evt);
            }
        });

        jcbItems.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-------" }));

        jtOrders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Categoría", "Producto", "Precio"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jtOrders);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jlCategory)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(jcbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(36, 36, 36)
                            .addComponent(jlItem)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jcbItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(jbAddOrder)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbLogin)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbSignup)))
                .addContainerGap(12, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbLogin)
                    .addComponent(jbSignup))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlCategory)
                    .addComponent(jlItem)
                    .addComponent(jbAddOrder)
                    .addComponent(jcbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(60, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Repinta la tabla del pedido a partir de unos items.
     * @param items ArrayList de items a partir de los cuales se pinta la tabla.
     */
    protected void repaintTable(ArrayList<Item> items) {
        Vector headersTable = new Vector();
        headersTable.add("Nombre");
        headersTable.add("Precio");
        headersTable.add("Categoría");

        DefaultTableModel dtm = new DefaultTableModel(headersTable, 0);
        jtOrders.setModel(dtm);

        for (int i=0;i<items.size();i++){
            dtm.setRowCount(dtm.getRowCount()+1);
            jtOrders.setValueAt(items.get(i).getName(), i, 0);
            jtOrders.setValueAt(items.get(i).getPrize(), i, 1);
            jtOrders.setValueAt(items.get(i).getCategory().getName(), i, 2);
        }
    }
    
    /**
     * Añade un item al pedido.
     */
    private void addItemToOrder() {
        Item selectedItem = null;

        for (Item item : items) {
            if (item.getName().equals(jcbItems.getSelectedItem())) {
                selectedItem = item;
            }
        }
        
        shop.addToOrder(selectedItem);
    }
    
    /**
     * Carga los items en memoria y en el combobox.
     */
    private void loadItems() {
        try {
            items = shop.getItemsFromDatabase(jcbCategories.getSelectedItem().toString());
            // Comprueba que hay resultados
            if (items.size() > 0) {
                jcbItems.setEnabled(true);
                for (Item item : items) {
                    jcbItems.addItem(item.getName());
                }
            } else {
                jcbItems.addItem("----");
                jcbItems.setEnabled(false);
            }
            
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(JPApp.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Items no disponibles en estos momentos.");
        }
    }
    
    /**
     * Carga las categorías en el combo box.
     */
    private void loadCategories() {
        try {
            ArrayList<Category> categories = shop.getCategoriesFromDatabase();
            
            for (Category category : categories) {
                jcbCategories.addItem(category.getName());
            }
        } catch (SQLException | ClassNotFoundException ex) {
            Logger.getLogger(JPApp.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error al conseguir las categorías de la base de datos.");
        }
    }
    
    /**
     * Bloquea los botones de registro e inicio de sesión.
     */
    protected void blockButtons() {
        jbLogin.setEnabled(false);
        jbSignup.setEnabled(false);
    }
    
    private void jbLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLoginActionPerformed
        JPLogin jplogin = new JPLogin(shop, this);
    }//GEN-LAST:event_jbLoginActionPerformed

    private void jbSignupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSignupActionPerformed
        JPSignup jpsignup = new JPSignup(shop);
    }//GEN-LAST:event_jbSignupActionPerformed

    private void jbAddOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAddOrderActionPerformed
        addItemToOrder();
        repaintTable(shop.getItemsOrder());
    }//GEN-LAST:event_jbAddOrderActionPerformed

    private void jcbCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcbCategoriesActionPerformed
        if (DBConnector.getConnection() != null) {
            jcbCategories.removeAllItems();
            loadCategories();
        }
    }//GEN-LAST:event_jcbCategoriesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    protected javax.swing.JButton jbAddOrder;
    private javax.swing.JButton jbLogin;
    private javax.swing.JButton jbSignup;
    private javax.swing.JComboBox<String> jcbCategories;
    private javax.swing.JComboBox<String> jcbItems;
    private javax.swing.JLabel jlCategory;
    private javax.swing.JLabel jlItem;
    private javax.swing.JTable jtOrders;
    // End of variables declaration//GEN-END:variables

}
