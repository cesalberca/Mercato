package es.cesalberca.mercato.view;

import es.cesalberca.mercato.controller.database.DatabaseConnector;
import es.cesalberca.mercato.controller.database.DatabaseHandler;
import es.cesalberca.mercato.controller.file.FileHandler;
import es.cesalberca.mercato.controller.shop.Shop;
import java.io.FileNotFoundException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 * Clase principal del programa.
 * @author César Alberca
 */
public class JFApp extends javax.swing.JFrame {
    JPApp jpa = null;
    private Shop shop = null;
  
    public JFApp() {
        initComponents();
        this.setBounds(100, 100, 600, 800);
        this.setTitle("Mercato");
        this.setVisible(true);
        
        try {
            // Al iniciar la aplicación se genera una nueva conexión.
            shop = new Shop(new DatabaseHandler());
            DatabaseConnector.newConnection();
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(JFApp.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Error al conectarse a la base de datos. Prueba a reiniciar la aplicación.");
        } finally {
            jpa = new JPApp(shop);
            this.getContentPane().add(jpa);
            
            // Si no hay conexión bloqueamos los botones.
            if (DatabaseConnector.getConnection() == null) {
                jpa.blockButtons();
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jmiSave = new javax.swing.JMenuItem();
        jbNew = new javax.swing.JMenuItem();
        jbExport = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jMenu1.setText("Archivo");

        jmiSave.setText("Guardar");
        jmiSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveActionPerformed(evt);
            }
        });
        jMenu1.add(jmiSave);

        jbNew.setText("Nuevo");
        jbNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewActionPerformed(evt);
            }
        });
        jMenu1.add(jbNew);

        jbExport.setText("Generar");
        jbExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExportActionPerformed(evt);
            }
        });
        jMenu1.add(jbExport);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Editar");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        try {
            // Desonecta de la bbdd en caso que se haya llegado a conectar.
            if (DatabaseConnector.getConnection() != null) {
                DatabaseConnector.disconnect();
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jmiSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveActionPerformed
        try {
            if (shop.getUser() == null) {
                JOptionPane.showMessageDialog(null, "Necesitas iniciar sesión primero");
            } else if (shop.getItemsOrder().isEmpty()){
                JOptionPane.showMessageDialog(null, "Necesitas añadir items primero");
            } else {
                shop.checkout();
                JOptionPane.showMessageDialog(null, "Pedido guardado correctamente");
                shop.clearOrder();
                jpa.repaintTable(shop.getItemsOrder());
            }
        } catch (SQLException ex) {
            Logger.getLogger(JFApp.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Pedido no guardado correctamente. Inténtalo de nuevo más tarde");
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(JFApp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jmiSaveActionPerformed

    private void jbExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExportActionPerformed
        FileHandler fh = new FileHandler();
        if (shop.getUser() != null) {
            try {
                fh.exportToHtml(shop.getUser());
            } catch (FileNotFoundException ex) {
                Logger.getLogger(JFApp.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_jbExportActionPerformed

    private void jbNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewActionPerformed
        if (shop.getItemsOrder().size() > 0) {
            int response = JOptionPane.showConfirmDialog(null, "Borrarás el pedido actual, ¿estás seguro de querer proceder?", "Nuevo pedido", JOptionPane.YES_NO_OPTION);
            if (response == JOptionPane.YES_OPTION) {
                shop.clearOrder();
                jpa.repaintTable(shop.getItemsOrder());
            }
        }
    }//GEN-LAST:event_jbNewActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JFApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JFApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JFApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JFApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new JFApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jbExport;
    private javax.swing.JMenuItem jbNew;
    protected javax.swing.JMenuItem jmiSave;
    // End of variables declaration//GEN-END:variables
}
